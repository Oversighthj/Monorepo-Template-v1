/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.TaskDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-20T15:13:14.707770Z[Etc/UTC]")
@Validated
@Tag(name = "Task", description = "the Task API")
public interface TaskApi {

    /**
     * GET /tasks : Get task list
     *
     * @param bookingId  (optional)
     * @param cleanerId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "tasksGet",
        summary = "Get task list",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks",
        produces = { "application/json" }
    )
    ResponseEntity<List<TaskDTO>> tasksGet(
        @Parameter(name = "bookingId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookingId", required = false) Long bookingId,
        @Parameter(name = "cleanerId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cleanerId", required = false) Long cleanerId
    );


    /**
     * DELETE /tasks/{id} : Delete task
     *
     * @param id  (required)
     * @return Deleted (status code 204)
     */
    @Operation(
        operationId = "tasksIdDelete",
        summary = "Delete task",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tasks/{id}"
    )
    ResponseEntity<Void> tasksIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /tasks/{id} : Get task
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "tasksIdGet",
        summary = "Get task",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<TaskDTO> tasksIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * PUT /tasks/{id} : Update task
     *
     * @param id  (required)
     * @param taskDTO  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "tasksIdPut",
        summary = "Update task",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tasks/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<TaskDTO> tasksIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "TaskDTO", description = "", required = true) @Valid @RequestBody TaskDTO taskDTO
    );


    /**
     * POST /tasks : Create task
     *
     * @param taskDTO  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "tasksPost",
        summary = "Create task",
        tags = { "Task" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tasks",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> tasksPost(
        @Parameter(name = "TaskDTO", description = "", required = true) @Valid @RequestBody TaskDTO taskDTO
    );

}
