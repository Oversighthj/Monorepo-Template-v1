openapi: 3.0.3
info:
  title: Template API
  version: "1.0"
  description: |
    Unified backend for Template API (Spring Boot) + Flutter client.

servers:
  - url: http://localhost:8080/api
    description: Local dev

security:
  - BearerAuth: []

paths:
  /feature:
    get:
      summary: "Get feature list"
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeatureDTO'

  /status:
    get:
      summary: "Status check"
      security: []
      responses:
        '200':
          description: "Success"
          content:
            text/plain:
              schema: {type: string}

  /auth/login:
    post:
      summary: "Login"
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: {type: string}
                password: {type: string}
      responses:
        '200':
          description: "JWT Token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: {type: string}

  /users:
    get:
      summary: "Get user list"
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
    post:
      summary: "Create user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '201': {description: "Created"}

  /properties:
    post:
      summary: "Create property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyDTO'
      responses:
        '201': {description: "Created"}
    get:
      summary: "Get property list"
      parameters:
        - in: query
          name: ownerId
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PropertyDTO'

  /properties/{id}:
    get:
      summary: "Get property"
      parameters:
        - in: path
          name: id
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyDTO'
    put:
      summary: "Update property"
      parameters:
        - in: path
          name: id
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyDTO'
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyDTO'
    delete:
      summary: "Delete property"
      parameters:
        - in: path
          name: id
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: "Deleted"}

  /bookings:
    post:
      tags: [Booking]
      summary: "Create booking"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingDTO'
      responses:
        '201': {description: "Created"}
    get:
      tags: [Booking]
      summary: "Get booking list"
      parameters:
        - in: query
          name: propertyId
          schema: {type: integer, format: int64}
        - in: query
          name: userId
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingDTO'

  /bookings/{id}:
    get:
      tags: [Booking]
      summary: "Get booking"
      parameters:
        - in: path
          name: id
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDTO'
    put:
      tags: [Booking]
      summary: "Update booking"
      parameters:
        - in: path
          name: id
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingDTO'
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDTO'
    delete:
      tags: [Booking]
      summary: "Delete booking"
      parameters:
        - in: path
          name: id
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: "Deleted"}

  /tasks:
    post:
      tags: [Task]
      summary: "Create task"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDTO'
      responses:
        '201': {description: "Created"}
    get:
      tags: [Task]
      summary: "Get task list"
      parameters:
        - in: query
          name: bookingId
          schema: {type: integer, format: int64}
        - in: query
          name: cleanerId
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDTO'

  /tasks/{id}:
    get:
      tags: [Task]
      summary: "Get task"
      parameters:
        - in: path
          name: id
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
    put:
      tags: [Task]
      summary: "Update task"
      parameters:
        - in: path
          name: id
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDTO'
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
    delete:
      tags: [Task]
      summary: "Delete task"
      parameters:
        - in: path
          name: id
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: "Deleted"}

  /messages:
    post:
      tags: [Message]
      summary: "Create message"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageDTO'
      responses:
        '201': {description: "Created"}
    get:
      tags: [Message]
      summary: "Get message list"
      parameters:
        - in: query
          name: bookingId
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageDTO'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    FeatureDTO:
      type: object
      properties:
        id:   {type: integer, format: int64}
        name: {type: string}

    UserDTO:
      type: object
      required: [role, email, passwordHash]
      properties:
        id:           {type: integer, format: int64}
        role:         {$ref: '#/components/schemas/UserRole'}
        email:        {type: string, format: email}
        passwordHash: {type: string}

    PropertyDTO:
      type: object
      required: [ownerId]
      properties:
        id:       {type: integer, format: int64}
        name:     {type: string}
        address:  {type: string}
        ownerId:  {type: integer, format: int64}
        active:   {type: boolean}

    BookingDTO:
      type: object
      required: [propertyId, userId, startAt, endAt, status]
      properties:
        id:         {type: integer, format: int64}
        propertyId: {type: integer, format: int64}
        userId:     {type: integer, format: int64}
        startAt:    {type: string, format: date-time}
        endAt:      {type: string, format: date-time}
        status:     {$ref: '#/components/schemas/BookingStatus'}

    BookingStatus:
      type: string
      enum: [PENDING, CONFIRMED, CANCELLED]

    TaskDTO:
      type: object
      required: [bookingId, cleanerId, type, status, due]
      properties:
        id:        {type: integer, format: int64}
        bookingId: {type: integer, format: int64}
        cleanerId: {type: integer, format: int64}
        type:      {type: string}
        status:    {$ref: '#/components/schemas/TaskStatus'}
        due:       {type: string, format: date-time}

    TaskStatus:
      type: string
      enum: [PENDING, DONE]

    MessageDTO:
      type: object
      required: [bookingId, senderId, content, sentAt]
      properties:
        id:        {type: integer, format: int64}
        bookingId: {type: integer, format: int64}
        senderId:  {type: integer, format: int64}
        content:   {type: string}
        sentAt:    {type: string, format: date-time}

    UserRole:
      type: string
      enum: [GUEST, ADMIN, CLEANER]
